// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//

//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
//= require underscore
//= require gmaps/google

$(document).on("page:update page:change ready ajax:success", function() {

	$(".editp").hide();

	$(".edit-button").click(function() {
		$(".editp").show(300);
	});

	setTimeout(function(){
		$('.flash-notice').fadeOut();
	}, 3500);
	
	var query ="";
	var map;
	var infowindow;
	var request;
	var services;
	var markers = [];

	$('.event-add-btn').click(function(e){
		console.log('*****************test')
	})

	query = $('#searcher').text();
	if (query == null || query == "") {
		query = 'restaurant'
	}
	console.log("QUERY IS: " + query)
	initialize();

	// alert(query);


	function initialize(){
		var center = new google.maps.LatLng(39.9500, -75.1667);
		map = new google.maps.Map(document.getElementById('map'),{
			center: center,
			zoom: 13
		});
		request = {
			location: center,
		// this is in meters about 2.5 miles
		radius: 2047,
		keyword: query
	};

	infowindow = new google.maps.InfoWindow();
	service = new google.maps.places.PlacesService(map);

	service.nearbySearch(request, callback);

	google.maps.event.addListener(map, 'click', function(event){
		map.setCenter(event.latLng)
		clearResults(markers)

		var request = {
			location: event.latLng,
			radius: 2047,
			types: [query]
		};
		service.nearbySearch(request, callback);
	})
}

function callback(results, status){
	if (results.length <= 0) {
		$('#thing').html("<h3> No Results :(</h3>");

	} else{
		$('#thing').html("");

	};

	if (status == google.maps.places.PlacesServiceStatus.OK){
		for (var i = 0; i < results.length; i++){
			markers.push(createMarker(results[i]));
			place = results[i];
			$('#thing').prepend("<h3>"+ place.name +", "+ "Rated" +" "+ place.rating + " " + "</h3>")

		}
	}
}

function createMarker(place){
	var placeLoc = place.geometry.location;
	var marker = new google.maps.Marker({
		map: map,
		position: place.geometry.location
	});


// this is adding the information to the information card 
google.maps.event.addListener(marker, 'click', function(){

	popup = ''
	popup += '<br/>'
	popup += '<span id="place">'+ place.name +'</span>'
	popup += '<br/>'
	popup += place.vicinity
	popup += '<br/>'
	popup += place.rating + ' Rating'
	popup += '<br/>'
	popup += '<button id="addme">Add me</button>'
	popup += '<br/>'

	


// this is calling the popup above for the infowindow
infowindow.setContent(popup);
console.log(place)


infowindow.open(map, this);
// add place to favorites list
$("#addme").on('click',function() {
	console.log("HELLOOOOOO SETH")	
	$.ajax({
		type: "POST",     
		url: "/places",     
		data: {name: place.name, location: place.vicinity, google_id: place.place_id, lat: place.geometry.location.lat(), lng: place.geometry.location.lng()},
		success: function (d) {         
			console.log('data returned is: GOOD');     
		},
		error: function(data){
			console.log("NOT WORKING: "+ data);
		} 
	})
});
});
return marker;
}

function clearResults(markers){
	for (var m in markers) {
		markers[m].setMap(null)
	}
	markers = []
}

google.maps.event.addDomListener(window, 'load', initialize);

});

