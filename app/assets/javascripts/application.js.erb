// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or any plugin's vendor/assets/javascripts directory can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/rails/sprockets#sprockets-directives) for details
// about supported directives.
//

//= require jquery
//= require jquery_ujs
//= require turbolinks
//= require_tree .
//= require underscore
//= require gmaps/google



$( document).on("page:change ready ajax:success", function() {

	var map;
	var infowindow;

	var request;
	var services;
	var markers = [];

	$('.event-add-btn').click(function(e){
		console.log('*****************test')
	})

	var query = $('#searcher').text();
	if (query == null || query == "") {
		query = 'restaurant'
	}else {
		initialize();
	};
	// alert(query);


	function initialize(){
		var center = new google.maps.LatLng(39.9500, -75.1667);
		map = new google.maps.Map(document.getElementById('map'),{
			center: center,
			zoom: 14
		});
		request = {
			location: center,
		// this is in meters about 2.5 miles
		radius: 4047,
		types: [query]
	};

	infowindow = new google.maps.InfoWindow({ content: 'TEST'});
	service = new google.maps.places.PlacesService(map);

	service.nearbySearch(request, callback);

	google.maps.event.addListener(map, 'click', function(event){
		map.setCenter(event.latLng)
		clearResults(markers)

		var request = {
			location: event.latLng,
			radius: 4047,
			query: [query]
		};
		service.nearbySearch(request, callback);
	})
}

function callback(results, status){
	if (status == google.maps.places.PlacesServiceStatus.OK){
		for (var i = 0; i < results.length; i++){
			// old code commented out
			// createMarker(results[i]);
			markers.push(createMarker(results[i]));
		}
	}
}


function createMarker(place){
	var placeLoc = place.geometry.location;
	var marker = new google.maps.Marker({
		map: map,
		position: place.geometry.location
	});

// this is adding the information to the information card 
google.maps.event.addListener(marker, 'click', function(){

	popup = ''
	popup += '<br/>'
	popup += '<span id="place">'+ place.name +'</span>'
	popup += '<br/>'
	popup += place.vicinity
	popup += '<br/>'
	popup += place.rating + ' Rating'
	popup += '<br/>'
	popup += '<a href="#">Add me</a>'
	popup += '<br/>'

// this is calling the popup above for the infowindow
infowindow.setContent(popup);
console.log(place)
infowindow.open(map, this);
});
return marker;
}

function clearResults(markers){
	for (var m in markers) {
		markers[m].setMap(null)
	}
	markers = []
}

google.maps.event.addDomListener(window, 'load', initialize);



});




